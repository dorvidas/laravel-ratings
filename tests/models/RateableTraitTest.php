<?php

namespace Dorvidas\Ratings\Tests\Models;

use Dorvidas\Ratings\Models\Rating;
use Dorvidas\Ratings\RatingBuilder;
use Dorvidas\Ratings\Tests\TestCase;

class RatingBuilderTest extends TestCase
{

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->loadLaravelMigrations(['--database' => 'testing']);

        $this->artisan('migrate', ['--database' => 'testing']);

        (new \Dorvidas\Ratings\Tests\Migrations\CreatePostsTable)->up();

        $this->withFactories(__DIR__ . '/../factories');

    }

    /** @test */
    public function it_can_rate()
    {
        $user = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();
        $this->actingAs($user);

        $post = factory(\Dorvidas\Ratings\Tests\Models\Post::class)->create();
        $rating = $post->rate()->give(5);
        $this->assertEquals(get_class($post), $rating->model);
        $this->assertEquals($post->id, $rating->model_id);
        $this->assertEquals(null, $rating->on_model);
        $this->assertEquals(null, $rating->on_model_id);
        $this->assertEquals(null, $rating->on_model_column);
        $this->assertEquals($user->id, $rating->rated_by);
        $this->assertEquals(5, $rating->rating);
    }

    /** @test */
    public function it_can_rate_model_on_model()
    {
        $user = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();
        $ratedUser = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();
        $this->actingAs($user);

        $post = factory(\Dorvidas\Ratings\Tests\Models\Post::class)->create(['user_id' => $ratedUser->id]);
        $rating = $ratedUser->rate()->on($post)->give(5);

        $this->assertEquals(get_class($ratedUser), $rating->model);
        $this->assertEquals($ratedUser->id, $rating->model_id);
        $this->assertEquals(get_class($post), $rating->on_model);
        $this->assertEquals($post->id, $rating->on_model_id);
        $this->assertEquals('user_id', $rating->on_model_column);
        $this->assertEquals($user->id, $rating->rated_by);
        $this->assertEquals(5, $rating->rating);
    }

    /** @test */
    public function it_can_get_ratings()
    {
        $user = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();
        $this->actingAs($user);

        $post = factory(\Dorvidas\Ratings\Tests\Models\Post::class)->create();
        $post->rate()->give(5);

        $rating = $post->ratings()->first();

        $this->assertEquals(get_class($post), $rating->model);
        $this->assertEquals($post->id, $rating->model_id);
    }
}