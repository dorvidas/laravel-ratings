<?php

namespace Dorvidas\Ratings\Tests;

use Dorvidas\Ratings\Exceptions\RatingBuilderException;
use Dorvidas\Ratings\Models\Rating;
use Dorvidas\Ratings\RatingBuilder;
use Dorvidas\Ratings\Facades\Rate;

class RatingBuilderTest extends TestCase
{

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->loadLaravelMigrations(['--database' => 'testing']);

        $this->artisan('migrate', ['--database' => 'testing']);

        (new \Dorvidas\Ratings\Tests\Migrations\CreatePostsTable)->up();

        $this->withFactories(__DIR__ . '/factories');

    }

    /**
     * @test
     */
    public function it_can_rate_model()
    {
        $user = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();
        $this->actingAs($user);

        $post = factory(\Dorvidas\Ratings\Tests\Models\Post::class)->create();

        $rating = Rate::model($post)->give(5);

        $this->assertEquals(5, $rating->rating);
        $this->assertEquals($user->id, $rating->rated_by);
        $this->assertEquals(get_class($post), $rating->model);
        $this->assertEquals($post->id, $rating->model_id);
    }

    /**
     * @test
     */
    public function it_can_rate_model_on_model()
    {

        $user = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();
        $author = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();

        $this->actingAs($user);

        $post = factory(\Dorvidas\Ratings\Tests\Models\Post::class)->create(['user_id' => $author->id]);

        $rating = Rate::model($author)->on($post)->give(5);

        $this->assertEquals(5, $rating->rating);
        $this->assertEquals($user->id, $rating->rated_by);

        $this->assertEquals(get_class($author), $rating->model);
        $this->assertEquals($author->id, $rating->model_id);

        $this->assertEquals(get_class($post), $rating->on_model);
        $this->assertEquals($post->id, $rating->on_model_id);
        $this->assertEquals('user_id', $rating->on_model_column);

    }

    /**
     * @test
     */
    public function it_throws_exception_where_no_authenticated_user()
    {
        $this->expectException(RatingBuilderException::class);
        $this->expectExceptionMessage('Not sure who is giving a rate');

        $ratedUser = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();

        $post = factory(\Dorvidas\Ratings\Tests\Models\Post::class)->create(['user_id' => $ratedUser->id]);

        Rate::model($post)->give(5);

    }

    /**
     * @test
     */
    public function it_is_possible_to_set_who_rates_explicitly()
    {
        $user = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();
        $ratedUser = factory(\Dorvidas\Ratings\Tests\Models\User::class)->create();

        $post = factory(\Dorvidas\Ratings\Tests\Models\Post::class)->create(['user_id' => $ratedUser->id]);

        $rating = Rate::model($post)->by($user)->give(5);

        $this->assertEquals($user->id, $rating->rated_by);

    }
}